def isPreRelease = project.version.endsWith('-pre')
def isFullRelease = !isPreRelease && !project.version.endsWith('-SNAPSHOT')
def proj = project
def canonicalVersion = file('canonical_version').text

jreleaser {
    environment {
        properties.put('rawChangelog', file("changelogs/${canonicalVersion}.txt").exists() ?
                file("changelogs/${canonicalVersion}.txt").text.replace('\r\n', '\n') : "")
    }

    project {
        name = 'Pdx-Unlimiter'
        description = 'A smart savegame manager, editor, and toolbox for all current major Paradox Grand Strategy games.'
        longDescription = 'The Pdx-Unlimiter is a tool for all major Paradox Grand Strategy games that provides a ' +
                'powerful and smart savegame manager to quickly organize and play all of your savegames with ease. ' +
                'Furthermore, it also comes with an Ironman converter, a powerful savegame editor, some savescumming ' +
                'tools, integrations for various other great community-made tools for all major Paradox games.'
        website = 'https://github.com/crschnick/pdx_unlimiter'
        authors = ['Christopher Schnick']
        license = 'GPL3'
        copyright = 'Christopher Schnick, 2022'

        java {
            groupId = 'com.crschnick.pdxu'
            version = '17'
            multiProject = true
        }

        snapshot {
            enabled = true
            pattern = '.*-SNAPSHOT'
            label = 'early-access'
        }
    }

    release {
        github {
            skipRelease = !isFullRelease && !isPreRelease
            skipTag = !isFullRelease && !isPreRelease
            overwrite = false
            tagName = '{{projectVersion}}'
            releaseName = '{{tagName}}'
            token = proj.hasProperty("PDXU_GITHUB_TOKEN") ? proj.property("PDXU_GITHUB_TOKEN") : System.getenv("JRELEASER_GITHUB_TOKEN")

            files = true
            artifacts = true
            checksums = false
            signatures = false

            update {
                enabled = true
                section('ASSETS')
                section('TITLE')
                section('BODY')
            }

            changelog {
                enabled = true
                formatted = 'ALWAYS'
                contentTemplate = isFullRelease ? file('misc/github_full.tpl') : file('misc/github_pre.tpl')
            }
        }
    }
    distributions {
        app {
            if (file("changelogs/${canonicalVersion}.txt").exists()) {
                artifact {
                    distributionType = 'BINARY'
                    path = "changelogs/${canonicalVersion}.txt"
                    extraProperties.put('universal', true)
                    transform = 'changelog.txt'
                }
            }

            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-windows.zip'
                    platform = 'windows'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-linux.zip'
                    platform = 'linux'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX() && System.getProperty("os.arch") == 'aarch64') {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-macos-arm64.dmg'
                    platform = 'osx'
                }
            } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                artifact {
                    distributionType = 'BINARY'
                    path = 'build/pdx_unlimiter-macos-x86_64.dmg'
                    platform = 'osx'
                }
            }
        }
    }

    if (isFullRelease || isPreRelease) {
        announce {
            discord {
                active = 'ALWAYS'
                webhook = proj.hasProperty("PDXU_DISCORD_WEBHOOK") ? proj.property("PDXU_DISCORD_WEBHOOK") : System.getenv("JRELEASER_DISCORD_WEBHOOK")
                messageTemplate = isFullRelease ? 'misc/discord_full.tpl' : 'misc/discord_pre.tpl'
            }
        }
    }
}
