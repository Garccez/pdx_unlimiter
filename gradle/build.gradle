import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.beryx.jlink' version '3.0.1'
    id 'org.jreleaser' version '1.8.0'
}

version file('version').text
def canonicalVersion = file('canonical_version').text

apply from: "$rootDir/gradle/jreleaser.gradle"
apply from: 'gradle/java.gradle'
apply from: 'gradle/mods.gradle'

clean {
    setDelete(Set.of())
    doLast {
        fileTree(dir: project.buildDir).exclude("jreleaser/**").visit { FileVisitDetails details ->
            delete details.file
        }
    }
}

clean {
    doFirst {
        // Fix clean failing when file is read-only
        if (file("$project.buildDir").exists()) {
            file("$project.buildDir").traverse { f -> if (f.exists() && f.isFile()) f.writable = true }
        }
    }
}

if (!file("${projectDir}/pdxu.properties").exists()) {
    file("${projectDir}/pdxu.properties").write(file("${projectDir}/misc/pdxu.properties.default").getText())
}

dependencies {
    implementation project(':pdxu-editor')
    implementation project(':pdxu-app')
    implementation project(':pdxu-io')
    implementation project(':pdxu-model')
}

repositories {
    flatDir {
        dirs file("$rootDir/misc/lib")
    }
    mavenCentral()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

List<String> runArgs = [
        "--add-exports", "javafx.graphics/com.sun.javafx.scene=com.jfoenix",
        "--add-exports", "javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-opens", "java.base/java.lang.reflect=com.jfoenix",
        '-XX:+UseZGC',
        "-Dfile.encoding=UTF-8",
        // This option completely breaks the module integration if set to true.
        // We have to explicitly disable it as it is true by default
        '-Dpolyglotimpl.DisableClassPathIsolation=false',
        "-Xmx16G"]

application {
    mainModule = 'com.crschnick.pdxu.app'
    mainClass = 'com.crschnick.pdxu.app.cli.MainCommand'
    applicationDefaultJvmArgs = runArgs + ["-ea"]
}


jlink {
    imageDir = file("$buildDir/image")
    options = [
            // '--strip-debug',
            '--no-header-files',
            '--no-man-pages']

    launcher {
        moduleName = 'com.crschnick.pdxu.app'
        mainClassName = 'com.crschnick.pdxu.app.cli.MainCommand'
        name = 'pdxu'
        jvmArgs = runArgs
    }

    customImage {
        appModules = [
                'com.crschnick.pdxu.app',
                'com.crschnick.pdxu.editor',
                'org.slf4j',
                'org.slf4j.simple',
                'jdk.crypto.ec',
                'org.kordamp.ikonli.materialdesign',
                'jdk.zipfs',
                'io.github.ititus.ddsiio',
                'jdk.accessibility',
                'org.graalvm.js'
        ]
    }

    jpackage {
        appVersion = canonicalVersion
        imageOutputDir = file("$buildDir/dist")
        imageName = 'Pdx-Unlimiter'
        imageOptions += ['--verbose']
        if (DefaultNativePlatform.currentOperatingSystem.windows) {
            icon = "misc/logo.ico"
        } else if (DefaultNativePlatform.currentOperatingSystem.linux) {
            icon = "misc/logo.png"
        } else {
            icon = "misc/logo.icns"
            if (System.getenv("MAC_NOTARIZATION_APPLE_ID") != null) {
                imageOptions += [
                        '--mac-sign',
                        '--mac-package-signing-prefix', 'com.crschnick.pdxu',
                        '--mac-signing-key-user-name', 'Christopher Schnick (PF6V9HYACS)',
                        '--mac-package-name', "Pdx-Unlimiter",
                        '--mac-entitlements', "$projectDir/misc/Entitlements.plist"
                ]
            }
        }
        skipInstaller = true
        applicationName = 'Pdx-Unlimiter'
    }
}

def getDistDir() {
    if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
        return "${buildDir}/dist/Pdx-Unlimiter.app/"
    } else {
        return "${buildDir}/dist/Pdx-Unlimiter/"
    }
}

def getResourcesDir() {
    if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
        return "${getDistDir()}/Contents/Resources"
    } else {
        return getDistDir()
    }
}

task writeVersion(type: DefaultTask) {
    doLast {
        file(getResourcesDir() + '/version').write(String.valueOf(version))
    }
}

task copyResources(type: Copy) {
    into getResourcesDir() + '/resources'
    from "${projectDir}/resources"
}

task copyLang(type: Copy) {
    into getResourcesDir() + '/lang'
    from "${projectDir}/lang"
}

task copyStartScripts(type: Copy) {
    into getResourcesDir() + 'bin'
    if (DefaultNativePlatform.currentOperatingSystem.windows) {
        from "${projectDir}/misc/pdxu.bat"
    } else if (DefaultNativePlatform.currentOperatingSystem.linux) {
        from "${projectDir}/misc/pdxu"
    } else {

    }
}

jpackage.finalizedBy(writeVersion, copyResources, copyLang, copyStartScripts)

task createDist(type: Zip, dependsOn: [jpackage, copyResources, copyLang, copyStartScripts]) {
    destinationDirectory = buildDir
    archivesBaseName = "pdx_unlimiter"
    archiveAppendix = DefaultNativePlatform.currentOperatingSystem.windows ? "windows" : DefaultNativePlatform.currentOperatingSystem.linux ? "linux" : "mac"
    archiveVersion = ""
    from getDistDir()
}


task bundleDmg(type: org.gradle.api.DefaultTask) {
    doLast {
        if (System.getenv("MAC_NOTARIZATION_APPLE_ID") != null) {
            exec {
                commandLine "$projectDir/misc/macos_notarize.sh", "$projectDir"
            }
            exec {
                commandLine "$projectDir/misc/macos_dmg.sh", "$projectDir"
            }
        }
    }
}
if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    createDist.finalizedBy(bundleDmg)
}

distTar {
    enabled = false;
}

distZip {
    enabled = false;
}
